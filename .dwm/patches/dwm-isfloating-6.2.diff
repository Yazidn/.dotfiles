diff --git a/dwm.c b/dwm.c
index 5f16260..950d574 100644
--- a/dwm.c
+++ b/dwm.c
@@ -66,6 +66,7 @@ enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
        ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
+enum { DWMIsFloating, DWMLast };
 
 typedef union {
 	int i;
@@ -197,6 +198,8 @@ static void run(void);
 static void scan(void);
 static int sendevent(Client *c, Atom proto);
 static void sendmon(Client *c, Monitor *m);
+static void setisfloating(Window w, int isfloating);
+static void toggleisfloating(Monitor *m, int isfloating);
 static void setclientstate(Client *c, long state);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
@@ -260,7 +263,7 @@ static void (*handler[LASTEvent]) (XEvent *) = {
 	[PropertyNotify] = propertynotify,
 	[UnmapNotify] = unmapnotify
 };
-static Atom wmatom[WMLast], netatom[NetLast];
+static Atom wmatom[WMLast], netatom[NetLast], dwmatom[DWMLast];
 static int running = 1;
 static Cur *cursor[CurLast];
 static Clr **scheme;
@@ -1067,6 +1070,7 @@ manage(Window w, XWindowAttributes *wa)
 		c->isfloating = c->oldstate = t || c->isfixed;
 	if (c->isfloating)
 		XRaiseWindow(dpy, c->win);
+	setisfloating(c->win, c->isfloating || !selmon->lt[selmon->sellt]->arrange);
 	attach(c);
 	attachstack(c);
 	XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32, PropModeAppend,
@@ -1462,6 +1466,23 @@ sendevent(Client *c, Atom proto)
 	return exists;
 }
 
+void
+setisfloating(Window w, int isfloating)
+{
+	XChangeProperty(dpy, w, dwmatom[DWMIsFloating], XA_CARDINAL, 32,
+				    PropModeReplace, (unsigned char*)&isfloating, 1);
+}
+
+void
+toggleisfloating(Monitor *m, int isfloating)
+{
+	Client *c;
+
+	for(c=nexttiled(m->clients); c; c = nexttiled(c->next)) {
+		setisfloating(c->win, isfloating);
+	}
+}
+
 void
 setfocus(Client *c)
 {
@@ -1510,6 +1531,7 @@ setlayout(const Arg *arg)
 	if (arg && arg->v)
 		selmon->lt[selmon->sellt] = (Layout *)arg->v;
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
+	toggleisfloating(selmon, selmon->lt[selmon->sellt]->arrange ? 0 : 1);
 	if (selmon->sel)
 		arrange(selmon);
 	else
@@ -1567,6 +1589,7 @@ setup(void)
 	netatom[NetWMWindowType] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE", False);
 	netatom[NetWMWindowTypeDialog] = XInternAtom(dpy, "_NET_WM_WINDOW_TYPE_DIALOG", False);
 	netatom[NetClientList] = XInternAtom(dpy, "_NET_CLIENT_LIST", False);
+	dwmatom[DWMIsFloating] = XInternAtom(dpy, "_IS_FLOATING", False);
 	/* init cursors */
 	cursor[CurNormal] = drw_cur_create(drw, XC_left_ptr);
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
@@ -1723,6 +1746,7 @@ togglefloating(const Arg *arg)
 	if (selmon->sel->isfloating)
 		resize(selmon->sel, selmon->sel->x, selmon->sel->y,
 			selmon->sel->w, selmon->sel->h, 0);
+	setisfloating(selmon->sel->win, selmon->sel->isfloating);
 	arrange(selmon);
 }
 
